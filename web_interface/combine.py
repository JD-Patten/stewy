#!/usr/bin/env python3
"""
combine_to_header.py

Combines index.html, styles.css, and script.js into a single C++ header file
containing a PROGMEM raw string literal.

"""

import os
import re
import uuid

# === File names ===
HTML_FILE = "index.html"
CSS_FILE = "styles.css"
JS_FILE = "script.js"
OUTPUT_FILE = "user_interface.h"
VAR_NAME = "USER_INTERFACE_HTML"


def read_file(filename):
    """Return file contents or empty string if missing."""
    if os.path.exists(filename):
        with open(filename, "r", encoding="utf-8") as f:
            return f.read()
    return ""


def choose_delimiter(content, base="UI"):
    """Choose a raw literal delimiter that won't conflict with content."""
    candidate = base
    while f"){candidate}\"" in content:
        candidate = f"{base}_{uuid.uuid4().hex[:6]}"
    return candidate


def inject_assets(html, css, js):
    """Insert CSS and JS into the HTML before </head> (if present)."""
    injection = ""
    if css:
        injection += "\n<style>\n" + css + "\n</style>\n"
    if js:
        injection += "\n<script>\n" + js + "\n</script>\n"

    if not injection:
        return html

    # Case-insensitive search for </head>
    match = re.search(r"</head>", html, re.IGNORECASE)
    if match:
        idx = match.start()
        return html[:idx] + injection + html[idx:]
    else:
        # No head tag, just append everything at the top
        return injection + html


def write_header(content):
    """Write the final .h file with a raw string literal."""
    delimiter = choose_delimiter(content, "UI")
    guard = os.path.basename(OUTPUT_FILE).upper().replace(".", "_").replace("-", "_")

    header = f"""// Auto-generated by combine_to_header.py
#ifndef {guard}
#define {guard}

#include <pgmspace.h>

const char {VAR_NAME}[] PROGMEM = R"{delimiter}(
{content}
){delimiter}";

#endif // {guard}
"""

    with open(OUTPUT_FILE, "w", encoding="utf-8") as f:
        f.write(header)

    print(f"✅ Created {OUTPUT_FILE}")


def main():
    html = read_file(HTML_FILE)
    css = read_file(CSS_FILE)
    js = read_file(JS_FILE)

    if not html:
        print(f"❌ Error: {HTML_FILE} not found.")
        return

    combined = inject_assets(html, css, js)
    write_header(combined)


if __name__ == "__main__":
    main()
