// Auto-generated by combine_to_header.py
#ifndef USER_INTERFACE_H
#define USER_INTERFACE_H

#include <pgmspace.h>

const char USER_INTERFACE_HTML[] PROGMEM = R"UI(
<!DOCTYPE html>
<html lang="en">
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <!-- CSS and JS will be injected here by the combine script -->
    <link rel="stylesheet" href="styles.css">
    <script src="script.js"></script>

<style>
body {
    display: flex;
    flex-direction: row;
    justify-content: center;
    align-items: center;
    height: 100vh;
    margin: 0;
    font-size: 30px;
    text-align: center;
    gap: 100px;
    background-color: #0099a109;
}

label {
    font-size: 30px;
    color: #000;
    font-family: sans-serif;
    text-align: right;
    padding-right: 0px;
    padding-left: 0px;
    line-height: 45px; /* This helps align labels vertically with inputs */
}

button {
    width: 100%; 
    padding: 20px;
    margin: 10px;
    background: #0099a1; 
    color: rgb(255, 255, 255);
    border: none;
    border-radius: 10px;
    font-size: 50px;
    font-family: sans-serif;
    cursor: pointer;
    transition: all 0.3s ease;

}

button:hover {
    background: #0099a17f; 
    transform: scale(1.02);
}

input {
    width: 120px;
    margin: 5px;
    font-size: 30px;
    font-family: sans-serif;
    background-color: #0099a121;  
    color: #000;
}

html, body {
    margin: 0;
    padding: 0;
    width: 100%;
    height: 100%;
    overflow: hidden;
}

.container {
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
}

/* Custom Hexagon Button */
.button.custom-hexagon {
    width: 300px;
    aspect-ratio: 1;
    clip-path: polygon( 50%     50%,
                        87.5%   71.65%,
                        75%     93.3%,
                        25%     93.3%,
                        12.5%   71.65%);
    color: white;
    position: absolute;
    transform-origin: 50% 49%;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 15px;
}

/* Update the active state to combine with rotations */
.button.custom-hexagon.active {
    transform: scale(0.95) rotate(60deg) !important;  /* For hexagon 1 */
}

/* Container for the rotating hexagons */
.walking-buttons {
    position: relative;
    width: 300px;
    height: 300px;
    display: flex;
    justify-content: center;  /* Center horizontally */
    align-items: center;      /* Center vertically */
}

.walking-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
}

/* Position the hexagons absolutely within container */
.button.custom-hexagon::after {
    content: '\2193';  /* Unicode Down Arrow U+2193 */
    color: white;
    font-size: 80px;
    position: absolute;
    top: 170px;
    transform: rotate(0deg);
}

/* Update the class names in the rotation styles */
.walk-left {
    transform: rotate(60deg);
}

.walk-forward {
    transform: rotate(180deg);
}

.walk-right {
    transform: rotate(300deg);
}

/* Update hover states with new class names */
.walk-left:hover {
    transform: scale(1.03) rotate(60deg);
}

.walk-forward:hover {
    transform: scale(1.03) rotate(179.99deg);
}

.walk-right:hover {
    transform: scale(1.03) rotate(300deg);
}

/* Update active states with new class names */
.walk-left.active {
    transform: rotate(60deg);
}

.walk-forward.active {
    transform: rotate(180deg);
}

.walk-right.active {
    transform: rotate(300deg);
}

/* Remove old class references */
/* Delete or comment out:
.custom-hexagon-1 { ... }
.custom-hexagon-2 { ... }
.custom-hexagon-3 { ... }
.custom-hexagon-1:hover { ... }
.custom-hexagon-2:hover { ... }
.custom-hexagon-3:hover { ... }
.custom-hexagon-1.active { ... }
.custom-hexagon-2.active { ... }
.custom-hexagon-3.active { ... }
*/

.pose-inputs {
    display: flex;
    gap: 40px;
    justify-content: center;
    margin-top: 20px;
}


.pose-grid {
    display: grid;
    grid-template-columns: auto auto auto auto;
    gap: 20px;
    justify-content: center;
    margin-top: 20px;
    column-gap: 20px;
}
.pose-grid label {
    text-align: right;
    padding-right: 0px;
    padding-left: 20px;
}


.offsets-grid {
    display: grid;
    grid-template-columns: auto 100px;
    gap: 20px;
    justify-content: center;
    margin-top: 20px;
}

/* Add these new styles at the end of the file */
.toggle-button {
    width: 90px;
    height: 90px;
    border-radius: 50%;
    background: #0099a1;
    color: white;
    font-size: 45px;
    padding: 0;
    margin: 10px;
    display: flex;
    align-items: center;
    justify-content: center;
    position: absolute;
    right: 20px;
    top: 20px;
    text-shadow: 0 0 20px rgb(255, 255, 255);  /* Added for better visibility */
}


.hidden {
    display: none;
}

.accel-grid {
    display: grid;
    grid-template-columns: auto 100px;
    gap: 20px;
    justify-content: center;
    margin-top: 20px;
}

.pose-grid-container {
    width: 100%;
    padding: 20px;
    box-sizing: border-box;
}

.pose-grid-table {
    display: flex;
    flex-direction: column;
    gap: 10px;
    width: 100%;
    max-width: 1200px;
    margin: 0 auto;
}

.grid-row {
    display: grid;
    grid-template-columns: repeat(7, 1fr);
    gap: 10px;
    align-items: center;
}

.grid-row.header {
    font-weight: bold;
    text-align: center;
}

.grid-row input {
    width: 100%;
    box-sizing: border-box;
}

.grid-row button {
    width: 100%;
    padding: 10px;
    font-size: 24px;
}

.pose-input {
    width: 100%;
    padding: 5px;
    font-size: 20px;
}


</style>

<script>
function sendRequest(command, inputs) {
    const params = inputs.map(input => typeof input === 'string' ? input : input.value).join(',');
    fetch(`${command}?params=${params}`);
}

function toggleOffsets() {
    // Get all containers
    const settingsContainers = document.querySelectorAll('.offsets-container, .accel-container');
    const controlContainers = document.querySelectorAll('.walking-container, .pose-container');
    const poseGridContainer = document.querySelector('.pose-grid-container');
    
    // Get current state from button icon
    const toggleButton = document.querySelector('.toggle-button');
    const currentIcon = toggleButton.textContent;
    
    // Cycle between states
    if (currentIcon === '\u{2699}') {  // If showing gear (controls)
        // Show settings
        settingsContainers.forEach(container => container.classList.remove('hidden'));
        controlContainers.forEach(container => container.classList.add('hidden'));
        poseGridContainer.classList.add('hidden');
        toggleButton.textContent = '\u{1F3AE}';  // Game controller icon
    } else if (currentIcon === '\u{1F3AE}') {  // If showing game controller (settings)
        // Show pose grid
        settingsContainers.forEach(container => container.classList.add('hidden'));
        controlContainers.forEach(container => container.classList.add('hidden'));
        poseGridContainer.classList.remove('hidden');
        toggleButton.textContent = '\u{1F4C4}';  // Page icon
    } else {  // If showing page (pose grid)
        // Show controls
        settingsContainers.forEach(container => container.classList.add('hidden'));
        controlContainers.forEach(container => container.classList.remove('hidden'));
        poseGridContainer.classList.add('hidden');
        toggleButton.textContent = '\u{2699}';  // Gear icon
    }
}

</script>
</head>
<body>
    <div class="walking-container">
        <div class="walking-buttons">
            <button class="button custom-hexagon walk-left" onclick="sendRequest('/walk', [document.getElementById('speed_multiplier'), 'left'])"></button>
            <button class="button custom-hexagon walk-forward" onclick="sendRequest('/walk', [document.getElementById('speed_multiplier'), 'forward'])"></button>
            <button class="button custom-hexagon walk-right" onclick="sendRequest('/walk', [document.getElementById('speed_multiplier'), 'right'])"></button>
        </div>
        <div>
            <label>Speed Multiplier</label>
        </div>
        <div>
            <input type='number' id='speed_multiplier' placeholder='speed multiplier' value='1.0'>
        </div>
    </div>
    
    <div class="pose-container">
        <div>
            <button onclick="sendRequest('/pose1', [
                document.getElementById('pose_x'),
                document.getElementById('pose_y'),
                document.getElementById('pose_z'),
                document.getElementById('pose_roll'),
                document.getElementById('pose_pitch'),
                document.getElementById('pose_yaw')
            ])">Set Pose</button>
        </div>
        <div class="pose-grid">
            <label>X</label>
            <input type='number' id='pose_x' placeholder='X' value='0.0'>
            <label>Roll</label>
            <input type='number' id='pose_roll' placeholder='Roll' value='0.0'>
            
            <label>Y</label>
            <input type='number' id='pose_y' placeholder='Y' value='0.0'>
            <label>Pitch</label>
            <input type='number' id='pose_pitch' placeholder='Pitch' value='0.0'>
            
            <label>Z</label>
            <input type='number' id='pose_z' placeholder='Z' value='0.0'>
            <label>Yaw</label>
            <input type='number' id='pose_yaw' placeholder='Yaw' value='0.0'>
        </div>
    </div>

    <button class="toggle-button" onclick="toggleOffsets()">&#x2699;</button>
    <div class="offsets-container hidden">
        <div>
            <button onclick="sendRequest('/setOffsets', [
                document.getElementById('offset_1').value,
                document.getElementById('offset_2').value,
                document.getElementById('offset_3').value,
                document.getElementById('offset_4').value,
                document.getElementById('offset_5').value,
                document.getElementById('offset_6').value
            ])">Set Offsets</button>
        </div>
        <div class="offsets-grid">
            <label>Servo 1</label>
            <input type='number' id='offset_1' placeholder='offset1' value='0.0'>
            
            <label>Servo 2</label>
            <input type='number' id='offset_2' placeholder='offset2' value='0.0'>

            <label>Servo 3</label>
            <input type='number' id='offset_3' placeholder='offset3' value='0.0'>

            <label>Servo 4</label>
            <input type='number' id='offset_4' placeholder='offset4' value='0.0'>

            <label>Servo 5</label>
            <input type='number' id='offset_5' placeholder='offset5' value='0.0'>

            <label>Servo 6</label>
            <input type='number' id='offset_6' placeholder='offset6' value='0.0'>
        </div>
    </div>

    <div class="accel-container hidden">
        <div>
            <button onclick="sendRequest('/setMaxAccel', [
                document.getElementById('max_trans_accel'),
                document.getElementById('max_angular_accel')
            ])">Set Accelerations</button>
        </div>
        <div class="accel-grid">
            <label>Translational</label>
            <input type='number' id='max_trans_accel' placeholder='translational' value='50.0'>
            
            <label>Rotational</label>
            <input type='number' id='max_angular_accel' placeholder='rotational' value='50.0'>
        </div>
    </div>

    <div class="pose-grid-container hidden">
        <div class="pose-grid-table">
            <div class="grid-row header">
                <div>X</div>
                <div>Y</div>
                <div>Z</div>
                <div>Roll</div>
                <div>Pitch</div>
                <div>Yaw</div>
                <div></div>
            </div>
            <div class="grid-row">
                <input type="number" class="pose-input" id="pose1_x" value="0.0">
                <input type="number" class="pose-input" id="pose1_y" value="0.0">
                <input type="number" class="pose-input" id="pose1_z" value="0.0">
                <input type="number" class="pose-input" id="pose1_roll" value="0.0">
                <input type="number" class="pose-input" id="pose1_pitch" value="0.0">
                <input type="number" class="pose-input" id="pose1_yaw" value="0.0">
                <button onclick="sendRequest('/pose1', [
                    document.getElementById('pose1_x'),
                    document.getElementById('pose1_y'),
                    document.getElementById('pose1_z'),
                    document.getElementById('pose1_roll'),
                    document.getElementById('pose1_pitch'),
                    document.getElementById('pose1_yaw')
                ])">Set</button>
            </div>
            <div class="grid-row">
                <input type="number" class="pose-input" id="pose2_x" value="0.0">
                <input type="number" class="pose-input" id="pose2_y" value="0.0">
                <input type="number" class="pose-input" id="pose2_z" value="0.0">
                <input type="number" class="pose-input" id="pose2_roll" value="0.0">
                <input type="number" class="pose-input" id="pose2_pitch" value="0.0">
                <input type="number" class="pose-input" id="pose2_yaw" value="0.0">
                <button onclick="sendRequest('/pose1', [
                    document.getElementById('pose2_x'),
                    document.getElementById('pose2_y'),
                    document.getElementById('pose2_z'),
                    document.getElementById('pose2_roll'),
                    document.getElementById('pose2_pitch'),
                    document.getElementById('pose2_yaw')
                ])">Set</button>
            </div>
            <div class="grid-row">
                <input type="number" class="pose-input" id="pose3_x" value="0.0">
                <input type="number" class="pose-input" id="pose3_y" value="0.0">
                <input type="number" class="pose-input" id="pose3_z" value="0.0">
                <input type="number" class="pose-input" id="pose3_roll" value="0.0">
                <input type="number" class="pose-input" id="pose3_pitch" value="0.0">
                <input type="number" class="pose-input" id="pose3_yaw" value="0.0">
                <button onclick="sendRequest('/pose1', [
                    document.getElementById('pose3_x'),
                    document.getElementById('pose3_y'),
                    document.getElementById('pose3_z'),
                    document.getElementById('pose3_roll'),
                    document.getElementById('pose3_pitch'),
                    document.getElementById('pose3_yaw')
                ])">Set</button>
            </div>
            <div class="grid-row">
                <input type="number" class="pose-input" id="pose4_x" value="0.0">
                <input type="number" class="pose-input" id="pose4_y" value="0.0">
                <input type="number" class="pose-input" id="pose4_z" value="0.0">
                <input type="number" class="pose-input" id="pose4_roll" value="0.0">
                <input type="number" class="pose-input" id="pose4_pitch" value="0.0">
                <input type="number" class="pose-input" id="pose4_yaw" value="0.0">
                <button onclick="sendRequest('/pose1', [
                    document.getElementById('pose4_x'),
                    document.getElementById('pose4_y'),
                    document.getElementById('pose4_z'),
                    document.getElementById('pose4_roll'),
                    document.getElementById('pose4_pitch'),
                    document.getElementById('pose4_yaw')
                ])">Set</button>
            </div>
        </div>
    </div>

</body>
</html> 
)UI";

#endif // USER_INTERFACE_H
